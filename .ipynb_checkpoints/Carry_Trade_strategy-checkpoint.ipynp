{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "induced-vector",
   "metadata": {},
   "source": [
    "## FX Carry Strategy in Pyhton"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "precise-highlight",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import pandas_datareader as pdr\n",
    "import my_risk_kit as mrk "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "naughty-television",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>EUR</th>\n",
       "      <th>CNY</th>\n",
       "      <th>JPY</th>\n",
       "      <th>CAD</th>\n",
       "      <th>GBP</th>\n",
       "      <th>AUD</th>\n",
       "      <th>CHF</th>\n",
       "      <th>SEK</th>\n",
       "      <th>NOK</th>\n",
       "      <th>NZD</th>\n",
       "      <th>DKK</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DATE</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2023-04-01</th>\n",
       "      <td>0.023</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.001</td>\n",
       "      <td>0.015</td>\n",
       "      <td>0.025</td>\n",
       "      <td>0.002</td>\n",
       "      <td>0.030</td>\n",
       "      <td>0.012</td>\n",
       "      <td>0.003</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-05-01</th>\n",
       "      <td>-0.009</td>\n",
       "      <td>-0.014</td>\n",
       "      <td>-0.026</td>\n",
       "      <td>-0.002</td>\n",
       "      <td>0.003</td>\n",
       "      <td>-0.007</td>\n",
       "      <td>0.001</td>\n",
       "      <td>-0.011</td>\n",
       "      <td>-0.028</td>\n",
       "      <td>0.001</td>\n",
       "      <td>-0.008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-06-01</th>\n",
       "      <td>-0.002</td>\n",
       "      <td>-0.025</td>\n",
       "      <td>-0.030</td>\n",
       "      <td>0.017</td>\n",
       "      <td>0.011</td>\n",
       "      <td>0.011</td>\n",
       "      <td>-0.003</td>\n",
       "      <td>-0.028</td>\n",
       "      <td>0.001</td>\n",
       "      <td>-0.013</td>\n",
       "      <td>-0.002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-07-01</th>\n",
       "      <td>0.021</td>\n",
       "      <td>-0.003</td>\n",
       "      <td>0.003</td>\n",
       "      <td>0.006</td>\n",
       "      <td>0.021</td>\n",
       "      <td>0.004</td>\n",
       "      <td>0.032</td>\n",
       "      <td>0.026</td>\n",
       "      <td>0.055</td>\n",
       "      <td>0.016</td>\n",
       "      <td>0.021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-08-01</th>\n",
       "      <td>-0.014</td>\n",
       "      <td>-0.009</td>\n",
       "      <td>-0.027</td>\n",
       "      <td>-0.020</td>\n",
       "      <td>-0.015</td>\n",
       "      <td>-0.038</td>\n",
       "      <td>-0.007</td>\n",
       "      <td>-0.030</td>\n",
       "      <td>-0.022</td>\n",
       "      <td>-0.038</td>\n",
       "      <td>-0.014</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              EUR    CNY    JPY    CAD    GBP    AUD    CHF    SEK    NOK  \\\n",
       "DATE                                                                        \n",
       "2023-04-01  0.023  0.000  0.001  0.015  0.025  0.002  0.030  0.012  0.003   \n",
       "2023-05-01 -0.009 -0.014 -0.026 -0.002  0.003 -0.007  0.001 -0.011 -0.028   \n",
       "2023-06-01 -0.002 -0.025 -0.030  0.017  0.011  0.011 -0.003 -0.028  0.001   \n",
       "2023-07-01  0.021 -0.003  0.003  0.006  0.021  0.004  0.032  0.026  0.055   \n",
       "2023-08-01 -0.014 -0.009 -0.027 -0.020 -0.015 -0.038 -0.007 -0.030 -0.022   \n",
       "\n",
       "              NZD    DKK  \n",
       "DATE                      \n",
       "2023-04-01  0.000  0.023  \n",
       "2023-05-01  0.001 -0.008  \n",
       "2023-06-01 -0.013 -0.002  \n",
       "2023-07-01  0.016  0.021  \n",
       "2023-08-01 -0.038 -0.014  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create FRED ticker lists containing the exchange rates and interest rates of:\n",
    "# the Euro area, China, Japan, Canada, the UK, Australia, Switzerland, Sweden, Norway, New Zealand and Denmark\n",
    "list1=[\"EXUSEU\", \"EXCHUS\", \"EXJPUS\", \"EXCAUS\", \"EXUSUK\", \"EXUSAL\", \"EXSZUS\", \"EXSDUS\", \"EXNOUS\", \"EXUSNZ\", \"EXDNUS\"]\n",
    "list2=[\"IR3TIB01EZM156N\", \"IR3TIB01CNM156N\", \"IR3TIB01JPM156N\", \"IR3TIB01CAM156N\", \"IR3TIB01GBM156N\", \"IR3TIB01AUM156N\",\"IR3TIB01CHM156N\",\"IR3TIB01SEM156N\"\n",
    "    ,\"IR3TIB01NOM156N\",\"IR3TIB01NZM156N\",\"IR3TIB01DKM156N\"]\n",
    "\n",
    "# retrieve exchange rates\n",
    "exch_rets=pdr.get_data_fred(list1,start=\"2001-11\")\n",
    "# standardize each currency to currency/USD\n",
    "exch_rets.loc[:,[\"EXUSEU\", \"EXUSUK\", \"EXUSAL\", \"EXUSNZ\"]]=1/exch_rets.loc[:,[\"EXUSEU\", \"EXUSUK\", \"EXUSAL\", \"EXUSNZ\"]]\n",
    "exch_rets=exch_rets.rename(columns={\"EXUSEU\": \"EUR\",\"EXCHUS\": \"CNY\",\"EXJPUS\": \"JPY\",\"EXCAUS\": \"CAD\",\"EXUSUK\": \"GBP\" \n",
    "                                    ,\"EXUSAL\": \"AUD\",\"EXSZUS\": \"CHF\", \"EXSDUS\": \"SEK\",\"EXNOUS\": \"NOK\",\"EXUSNZ\": \"NZD\"\n",
    "                                    ,\"EXDNUS\": \"DKK\"})\n",
    "\n",
    "# standardize each currency to USD/currency (to calculate returns)\n",
    "exch_rets=1/exch_rets\n",
    "exch_rets=(exch_rets/exch_rets.shift(1)-1).dropna()\n",
    "\n",
    "exch_rets.tail().round(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "mental-andrew",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>EUR</th>\n",
       "      <th>CNY</th>\n",
       "      <th>JPY</th>\n",
       "      <th>CAD</th>\n",
       "      <th>GBP</th>\n",
       "      <th>AUD</th>\n",
       "      <th>CHF</th>\n",
       "      <th>SEK</th>\n",
       "      <th>NOK</th>\n",
       "      <th>NZD</th>\n",
       "      <th>DKK</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DATE</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-08-01</th>\n",
       "      <td>-0.000456</td>\n",
       "      <td>0.002383</td>\n",
       "      <td>-0.000060</td>\n",
       "      <td>0.000177</td>\n",
       "      <td>0.000058</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>-0.000642</td>\n",
       "      <td>-0.000135</td>\n",
       "      <td>0.000350</td>\n",
       "      <td>0.000450</td>\n",
       "      <td>-0.000175</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-09-01</th>\n",
       "      <td>-0.000454</td>\n",
       "      <td>0.002308</td>\n",
       "      <td>-0.000060</td>\n",
       "      <td>0.000185</td>\n",
       "      <td>0.000058</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>-0.000635</td>\n",
       "      <td>-0.000142</td>\n",
       "      <td>0.000558</td>\n",
       "      <td>0.000475</td>\n",
       "      <td>-0.000179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-10-01</th>\n",
       "      <td>-0.000458</td>\n",
       "      <td>0.002267</td>\n",
       "      <td>-0.000060</td>\n",
       "      <td>0.000192</td>\n",
       "      <td>0.000133</td>\n",
       "      <td>0.000033</td>\n",
       "      <td>-0.000642</td>\n",
       "      <td>-0.000178</td>\n",
       "      <td>0.000617</td>\n",
       "      <td>0.000583</td>\n",
       "      <td>-0.000230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-01</th>\n",
       "      <td>-0.000473</td>\n",
       "      <td>0.002450</td>\n",
       "      <td>-0.000060</td>\n",
       "      <td>0.000216</td>\n",
       "      <td>0.000108</td>\n",
       "      <td>0.000033</td>\n",
       "      <td>-0.000653</td>\n",
       "      <td>-0.000289</td>\n",
       "      <td>0.000692</td>\n",
       "      <td>0.000692</td>\n",
       "      <td>-0.000229</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-01</th>\n",
       "      <td>-0.000485</td>\n",
       "      <td>0.002567</td>\n",
       "      <td>-0.000041</td>\n",
       "      <td>0.000225</td>\n",
       "      <td>0.000133</td>\n",
       "      <td>0.000050</td>\n",
       "      <td>-0.000628</td>\n",
       "      <td>-0.000321</td>\n",
       "      <td>0.000850</td>\n",
       "      <td>0.000758</td>\n",
       "      <td>-0.000227</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 EUR       CNY       JPY       CAD       GBP       AUD  \\\n",
       "DATE                                                                     \n",
       "2021-08-01 -0.000456  0.002383 -0.000060  0.000177  0.000058  0.000008   \n",
       "2021-09-01 -0.000454  0.002308 -0.000060  0.000185  0.000058  0.000008   \n",
       "2021-10-01 -0.000458  0.002267 -0.000060  0.000192  0.000133  0.000033   \n",
       "2021-11-01 -0.000473  0.002450 -0.000060  0.000216  0.000108  0.000033   \n",
       "2021-12-01 -0.000485  0.002567 -0.000041  0.000225  0.000133  0.000050   \n",
       "\n",
       "                 CHF       SEK       NOK       NZD       DKK  \n",
       "DATE                                                          \n",
       "2021-08-01 -0.000642 -0.000135  0.000350  0.000450 -0.000175  \n",
       "2021-09-01 -0.000635 -0.000142  0.000558  0.000475 -0.000179  \n",
       "2021-10-01 -0.000642 -0.000178  0.000617  0.000583 -0.000230  \n",
       "2021-11-01 -0.000653 -0.000289  0.000692  0.000692 -0.000229  \n",
       "2021-12-01 -0.000628 -0.000321  0.000850  0.000758 -0.000227  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# retrieve interest rates\n",
    "rates=pdr.get_data_fred(list2,start=\"2013-01\")\n",
    "# copy columnnames for indexing\n",
    "rates.columns=exch_rets.columns\n",
    "# retrieve US interest rate\n",
    "benchmark_rate=pdr.get_data_fred(\"IR3TIB01USM156N\",start=\"2013-01\")\n",
    "# calculate monthly returns\n",
    "benchmark_rate=benchmark_rate/100/12\n",
    "rates=rates/100/12\n",
    "rates.dropna(inplace = True)\n",
    "rates.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "based-behavior",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>EUR</th>\n",
       "      <th>CNY</th>\n",
       "      <th>JPY</th>\n",
       "      <th>CAD</th>\n",
       "      <th>GBP</th>\n",
       "      <th>AUD</th>\n",
       "      <th>CHF</th>\n",
       "      <th>SEK</th>\n",
       "      <th>NOK</th>\n",
       "      <th>NZD</th>\n",
       "      <th>DKK</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DATE</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-08-01</th>\n",
       "      <td>2.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-09-01</th>\n",
       "      <td>2.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-10-01</th>\n",
       "      <td>2.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-01</th>\n",
       "      <td>2.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>9.5</td>\n",
       "      <td>9.5</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-01</th>\n",
       "      <td>2.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            EUR   CNY  JPY  CAD  GBP  AUD  CHF  SEK   NOK   NZD  DKK\n",
       "DATE                                                                \n",
       "2021-08-01  2.0  11.0  5.0  8.0  7.0  6.0  1.0  4.0   9.0  10.0  3.0\n",
       "2021-09-01  2.0  11.0  5.0  8.0  7.0  6.0  1.0  4.0  10.0   9.0  3.0\n",
       "2021-10-01  2.0  11.0  5.0  8.0  7.0  6.0  1.0  4.0  10.0   9.0  3.0\n",
       "2021-11-01  2.0  11.0  5.0  8.0  7.0  6.0  1.0  3.0   9.5   9.5  4.0\n",
       "2021-12-01  2.0  11.0  5.0  8.0  7.0  6.0  1.0  3.0  10.0   9.0  4.0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ranked_rates = rates.rank(1, ascending=True)\n",
    "ranked_rates.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "architectural-velvet",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>EUR</th>\n",
       "      <th>CNY</th>\n",
       "      <th>JPY</th>\n",
       "      <th>CAD</th>\n",
       "      <th>GBP</th>\n",
       "      <th>AUD</th>\n",
       "      <th>CHF</th>\n",
       "      <th>SEK</th>\n",
       "      <th>NOK</th>\n",
       "      <th>NZD</th>\n",
       "      <th>DKK</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DATE</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-08-01</th>\n",
       "      <td>-0.004568</td>\n",
       "      <td>-0.000077</td>\n",
       "      <td>0.003292</td>\n",
       "      <td>-0.005477</td>\n",
       "      <td>-0.000797</td>\n",
       "      <td>-0.015235</td>\n",
       "      <td>0.002952</td>\n",
       "      <td>-0.006118</td>\n",
       "      <td>-0.006193</td>\n",
       "      <td>-0.000286</td>\n",
       "      <td>-0.004557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-09-01</th>\n",
       "      <td>-0.000170</td>\n",
       "      <td>0.003175</td>\n",
       "      <td>-0.002799</td>\n",
       "      <td>-0.005682</td>\n",
       "      <td>-0.004711</td>\n",
       "      <td>0.001095</td>\n",
       "      <td>-0.008778</td>\n",
       "      <td>0.004014</td>\n",
       "      <td>0.021933</td>\n",
       "      <td>0.010603</td>\n",
       "      <td>-0.000111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-10-01</th>\n",
       "      <td>-0.014025</td>\n",
       "      <td>0.006093</td>\n",
       "      <td>-0.026171</td>\n",
       "      <td>0.019061</td>\n",
       "      <td>-0.002258</td>\n",
       "      <td>0.013676</td>\n",
       "      <td>0.000108</td>\n",
       "      <td>-0.002124</td>\n",
       "      <td>0.023996</td>\n",
       "      <td>0.001560</td>\n",
       "      <td>-0.014470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-01</th>\n",
       "      <td>-0.015862</td>\n",
       "      <td>0.004430</td>\n",
       "      <td>-0.007401</td>\n",
       "      <td>-0.010583</td>\n",
       "      <td>-0.017371</td>\n",
       "      <td>-0.014166</td>\n",
       "      <td>0.001520</td>\n",
       "      <td>-0.016039</td>\n",
       "      <td>-0.032330</td>\n",
       "      <td>-0.006370</td>\n",
       "      <td>-0.015670</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-01</th>\n",
       "      <td>-0.010074</td>\n",
       "      <td>0.003077</td>\n",
       "      <td>0.001160</td>\n",
       "      <td>-0.018203</td>\n",
       "      <td>-0.011884</td>\n",
       "      <td>-0.020802</td>\n",
       "      <td>0.000326</td>\n",
       "      <td>-0.031465</td>\n",
       "      <td>-0.027079</td>\n",
       "      <td>-0.033196</td>\n",
       "      <td>-0.009953</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 EUR       CNY       JPY       CAD       GBP       AUD  \\\n",
       "DATE                                                                     \n",
       "2021-08-01 -0.004568 -0.000077  0.003292 -0.005477 -0.000797 -0.015235   \n",
       "2021-09-01 -0.000170  0.003175 -0.002799 -0.005682 -0.004711  0.001095   \n",
       "2021-10-01 -0.014025  0.006093 -0.026171  0.019061 -0.002258  0.013676   \n",
       "2021-11-01 -0.015862  0.004430 -0.007401 -0.010583 -0.017371 -0.014166   \n",
       "2021-12-01 -0.010074  0.003077  0.001160 -0.018203 -0.011884 -0.020802   \n",
       "\n",
       "                 CHF       SEK       NOK       NZD       DKK  \n",
       "DATE                                                          \n",
       "2021-08-01  0.002952 -0.006118 -0.006193 -0.000286 -0.004557  \n",
       "2021-09-01 -0.008778  0.004014  0.021933  0.010603 -0.000111  \n",
       "2021-10-01  0.000108 -0.002124  0.023996  0.001560 -0.014470  \n",
       "2021-11-01  0.001520 -0.016039 -0.032330 -0.006370 -0.015670  \n",
       "2021-12-01  0.000326 -0.031465 -0.027079 -0.033196 -0.009953  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "exch_rets = exch_rets.loc[exch_rets.index.intersection(rates.index)]\n",
    "exch_rets.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "dense-antique",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DATE</th>\n",
       "      <th>variable</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>EUR</td>\n",
       "      <td>0.000171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2013-02-01</td>\n",
       "      <td>EUR</td>\n",
       "      <td>0.000186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2013-03-01</td>\n",
       "      <td>EUR</td>\n",
       "      <td>0.000172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2013-04-01</td>\n",
       "      <td>EUR</td>\n",
       "      <td>0.000174</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2013-05-01</td>\n",
       "      <td>EUR</td>\n",
       "      <td>0.000168</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        DATE variable     value\n",
       "0 2013-01-01      EUR  0.000171\n",
       "1 2013-02-01      EUR  0.000186\n",
       "2 2013-03-01      EUR  0.000172\n",
       "3 2013-04-01      EUR  0.000174\n",
       "4 2013-05-01      EUR  0.000168"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rates = rates.reset_index()\n",
    "rates_long = pd.melt(rates, id_vars='DATE', value_vars=[\"EUR\", \"CNY\", \"JPY\", \"CAD\", \"GBP\", \"AUD\", \"CHF\", \"SEK\", \"NOK\", \"NZD\", \"DKK\"])\n",
    "exch_rets = exch_rets.reset_index()\n",
    "exch_rets_long = pd.melt(exch_rets, id_vars='DATE', value_vars=[\"EUR\", \"CNY\", \"JPY\", \"CAD\", \"GBP\", \"AUD\", \"CHF\", \"SEK\", \"NOK\", \"NZD\", \"DKK\"])\n",
    "rates_long.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "legislative-condition",
   "metadata": {},
   "outputs": [],
   "source": [
    "rates_long.rename(columns = {\"DATE\": \"date\", \"variable\": \"currency\", \"value\": \"rate\"}, inplace = True)\n",
    "exch_rets_long.rename(columns = {\"DATE\": \"date\", \"variable\": \"currency\", \"value\": \"fx\"}, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "major-excess",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>currency</th>\n",
       "      <th>rate</th>\n",
       "      <th>fx</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>EUR</td>\n",
       "      <td>0.000171</td>\n",
       "      <td>0.014102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2013-02-01</td>\n",
       "      <td>EUR</td>\n",
       "      <td>0.000186</td>\n",
       "      <td>0.003232</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2013-03-01</td>\n",
       "      <td>EUR</td>\n",
       "      <td>0.000172</td>\n",
       "      <td>-0.029520</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2013-04-01</td>\n",
       "      <td>EUR</td>\n",
       "      <td>0.000174</td>\n",
       "      <td>0.005559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2013-05-01</td>\n",
       "      <td>EUR</td>\n",
       "      <td>0.000168</td>\n",
       "      <td>-0.003225</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        date currency      rate        fx\n",
       "0 2013-01-01      EUR  0.000171  0.014102\n",
       "1 2013-02-01      EUR  0.000186  0.003232\n",
       "2 2013-03-01      EUR  0.000172 -0.029520\n",
       "3 2013-04-01      EUR  0.000174  0.005559\n",
       "4 2013-05-01      EUR  0.000168 -0.003225"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_long = rates_long.merge(exch_rets_long, how = 'inner', on = ['date', 'currency'])\n",
    "df_long.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "included-bracket",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>currency</th>\n",
       "      <th>rate</th>\n",
       "      <th>fx</th>\n",
       "      <th>rank</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>EUR</td>\n",
       "      <td>0.000171</td>\n",
       "      <td>0.014102</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2013-02-01</td>\n",
       "      <td>EUR</td>\n",
       "      <td>0.000186</td>\n",
       "      <td>0.003232</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2013-03-01</td>\n",
       "      <td>EUR</td>\n",
       "      <td>0.000172</td>\n",
       "      <td>-0.029520</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2013-04-01</td>\n",
       "      <td>EUR</td>\n",
       "      <td>0.000174</td>\n",
       "      <td>0.005559</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2013-05-01</td>\n",
       "      <td>EUR</td>\n",
       "      <td>0.000168</td>\n",
       "      <td>-0.003225</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        date currency      rate        fx  rank\n",
       "0 2013-01-01      EUR  0.000171  0.014102   2.0\n",
       "1 2013-02-01      EUR  0.000186  0.003232   2.0\n",
       "2 2013-03-01      EUR  0.000172 -0.029520   2.0\n",
       "3 2013-04-01      EUR  0.000174  0.005559   2.0\n",
       "4 2013-05-01      EUR  0.000168 -0.003225   2.0"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_long[\"rank\"] = df_long.groupby('date')['rate'].rank(ascending=True)\n",
    "df_long.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "threaded-member",
   "metadata": {},
   "outputs": [],
   "source": [
    "grouped_df = df_long.groupby('date')\n",
    "long_portfolio = pd.Series(dtype=object)\n",
    "short_portfolio = pd.Series(dtype=object)\n",
    "\n",
    "for date, group in grouped_df:\n",
    "    ranks = group['rank'].values\n",
    "    fx_values = group['fx'].values\n",
    "    \n",
    "    # Calculate the long portfolio for each currency based on their ranks and weights\n",
    "    long = (\n",
    "        0.33 * fx_values[ranks == 11].sum() +\n",
    "        0.33 * fx_values[ranks == 10].sum() +\n",
    "        0.33 * fx_values[ranks == 9].sum() \n",
    "    )\n",
    "    short = (\n",
    "        0.33 * fx_values[ranks == 1].sum() +\n",
    "        0.33 * fx_values[ranks == 2].sum() +\n",
    "        0.33 * fx_values[ranks == 3].sum() \n",
    "    )\n",
    "    \n",
    "    \n",
    "    # Append the long portfolio for the current date to the overall long_portfolio Series\n",
    "    long_portfolio.at[date] = long\n",
    "    short_portfolio.at[date] = short"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "micro-semester",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>long</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2013-01-01</th>\n",
       "      <td>0.004006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013-02-01</th>\n",
       "      <td>-0.005952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013-03-01</th>\n",
       "      <td>-0.001957</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013-04-01</th>\n",
       "      <td>0.010447</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013-05-01</th>\n",
       "      <td>-0.021217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-08-01</th>\n",
       "      <td>-0.002164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-09-01</th>\n",
       "      <td>0.011785</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-10-01</th>\n",
       "      <td>0.010444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-11-01</th>\n",
       "      <td>0.001462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-01</th>\n",
       "      <td>-0.018875</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>108 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                long\n",
       "2013-01-01  0.004006\n",
       "2013-02-01 -0.005952\n",
       "2013-03-01 -0.001957\n",
       "2013-04-01  0.010447\n",
       "2013-05-01 -0.021217\n",
       "...              ...\n",
       "2021-08-01 -0.002164\n",
       "2021-09-01  0.011785\n",
       "2021-10-01  0.010444\n",
       "2021-11-01  0.001462\n",
       "2021-12-01 -0.018875\n",
       "\n",
       "[108 rows x 1 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "long_portfolio = long_portfolio.to_frame(name = 'long')\n",
    "long_portfolio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "favorite-admission",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2013-01-01    0.019621\n",
       "2013-02-01    0.006186\n",
       "2013-03-01    0.022797\n",
       "2013-04-01    0.015177\n",
       "2013-05-01   -0.003223\n",
       "dtype: float64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "short_portfolio = short_portfolio.to_frame(name = 'short')\n",
    "portfolio = long_portfolio['long']-short_portfolio['short']\n",
    "portfolio.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "fancy-quest",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>carry</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2013-01-01</th>\n",
       "      <td>0.019621</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013-02-01</th>\n",
       "      <td>0.006186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013-03-01</th>\n",
       "      <td>0.022797</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013-04-01</th>\n",
       "      <td>0.015177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013-05-01</th>\n",
       "      <td>-0.003223</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               carry\n",
       "date                \n",
       "2013-01-01  0.019621\n",
       "2013-02-01  0.006186\n",
       "2013-03-01  0.022797\n",
       "2013-04-01  0.015177\n",
       "2013-05-01 -0.003223"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "portfolio = pd.DataFrame(portfolio).rename(columns={0: 'carry'})\n",
    "portfolio.index.rename('date', inplace = True)\n",
    "portfolio.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "gorgeous-conspiracy",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='date'>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "(1+portfolio).cumprod().plot(figsize = (12, 8))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cordless-livestock",
   "metadata": {},
   "outputs": [],
   "source": [
    "mrk.summary_stats(portfolio)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "variable-corner",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "restricted-rough",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "anticipated-weekly",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
